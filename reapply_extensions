#!/bin/bash
#
# Use edx-platform command reapply_extensions to reapply all extensions for all
# students. This specifically fixes the case where a new problem gets added to
# a problem bank after the extension was originally applied.

progname=$(basename $0)

usage()
{
	cat <<EOF >&2
Usage: reapply_extensions [options]

Use edx-platform command reapply_extensions to reapply all extensions for all
students in a course.

Options:
 --help print this help message
 -n, --dry-run show what the script would do

EOF
}

SHORTOPTS="n"
LONGOPTS="help,dry-run"

if $(getopt -T >/dev/null 2>&1) ; [ $? = 4 ] ; then # New longopts getopt.
 OPTS=$(getopt -o $SHORTOPTS --long $LONGOPTS -n "$progname" -- "$@")
else # Old classic getopt.
 # Special handling for --help on old getopt.
 case $1 in --help) usage ; exit 0 ;; esac
 OPTS=$(getopt $SHORTOPTS "$@")
fi

eval set -- "$OPTS"
dryrun=false
while [ $# -gt 0 ]; do
	: debug: $1
	case $1 in
		--help)
			usage
			exit -1
			;;
		-n|--dry-run)
			dryrun=true
			shift
			;;
		--)
			shift
			break
			;;
		*)
			echo "Internal Error: option processing error: $1" 1>&2
			exit 1
			;;
	esac
done

VENV_PATH="$1"
EDX_PATH="$2"
COURSE_ID="$3"
OUTPUT_FILE="$4"

options=""
if $dryrun; then
	options="--dry-run"
fi

if [[ "$OUTPUT_FILE" == "" ]]; then
	OUTPUT_FILE="reapply_extensions_report_$(date +"%Y-%m-%dT%H:%M").txt"
fi

cd $EDX_PATH
echo $OUTPUT_FILE
cmd="$VENV_PATH/bin/python manage.py lms --settings=aws reapply_extensions $options $COURSE_ID"
eval $cmd
if [ $? -ne 0 ]; then
	echo "Ran command: $cmd" >&2
	echo "reapply_extensions command failed" >&2
	exit -2
fi
